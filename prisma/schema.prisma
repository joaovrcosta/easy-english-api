generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  email     String
  birthDay  DateTime
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teachers")
}

model Student {
  id          Int             @id @default(autoincrement())
  name        String
  active      Boolean
  phone       String
  birthDay    DateTime
  email       String
  civil_state String
  religion    String
  cpf         String
  rg          String
  nationality String
  sex         String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  guardianId  Int?
  Guardian    Guardian?       @relation(fields: [guardianId], references: [id])
  Address     Address[]
  courses     StudentCourse[]
  Contract    Contract[]
  Invoice     Invoice[]

  @@map("students")
}

model Guardian {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String
  email     String
  cpf       String?
  rg        String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Address   Address[]
  Student   Student[]

  @@map("guardians")
}

model Address {
  id           Int       @id @default(autoincrement())
  street       String
  number       String
  complement   String
  neighborhood String
  city         String
  state        String
  zipCode      String
  studentId    Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  student      Student   @relation(fields: [studentId], references: [id])
  Guardian     Guardian? @relation(fields: [guardianId], references: [id])
  guardianId   Int?

  @@map("addresses")
}

model Contract {
  id        String    @id @default(uuid())
  duration  Int
  active    Boolean
  startDate DateTime
  endDate   DateTime
  studentId Int
  student   Student   @relation(fields: [studentId], references: [id])
  invoices  Invoice[]

  @@map("contracts")
}

model Invoice {
  id         Int      @id @default(autoincrement())
  amount     Float
  emission   DateTime
  dueDate    DateTime
  discount   Float
  interest   Float
  fine       Float
  paid       Boolean
  studentId  Int
  student    Student  @relation(fields: [studentId], references: [id])
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("invoices")
}

model StudentCourse {
  studentId Int
  courseId  Int
  Student   Student  @relation(fields: [studentId], references: [id])
  Course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([studentId, courseId])
  @@map("student_courses")
}

model Course {
  id           Int             @id @default(autoincrement())
  acronym      String
  name         String
  valuePerHour Int
  category     String
  language     String
  available    Boolean
  avaliation   Float
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  teacherId    Int
  teacher      Teacher         @relation(fields: [teacherId], references: [id])
  students     StudentCourse[]

  @@map("courses")
}
